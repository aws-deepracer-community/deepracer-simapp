"""utils method to parse sensors and networks from model meta json file"""
import json
import logging
from markov.architecture.constants import Input, NeuralNetwork
from markov.log_handler.logger import Logger
from markov.constants import SIMAPP_VERSION_2, SIMAPP_VERSION_1

LOG = Logger(__name__, logging.INFO).get_logger()

def parse_model_metadata(local_model_metadata_path):
    """tuple: return a tuple of (bool, bool, str) for include_second_camera,
       include_lidar_sensor, and network"""
    try:
        with open(local_model_metadata_path, "r") as json_file:
            data = json.load(json_file)
            # simapp_version 2.0+ should contain version as key in
            # model_metadata.json
            if 'version' in data:
                simapp_version = float(data['version'])
                if simapp_version >= SIMAPP_VERSION_2:
                    sensor = data['sensor']
                else:
                    sensor = [Input.OBSERVATION.value]
            else:
                if 'sensor' in data:
                    sensor = data['sensor']
                    simapp_version = SIMAPP_VERSION_2
                else:
                    sensor = [Input.OBSERVATION.value]
                    simapp_version = SIMAPP_VERSION_1
            if 'neural_network' in data:
                network = data['neural_network']
            else:
                network = NeuralNetwork.DEEP_CONVOLUTIONAL_NETWORK_SHALLOW.value
        LOG.info("Sensor list %s, network %s, simapp_version %s", sensor, network, simapp_version)
        return sensor, network, simapp_version
    except ValueError as ex:
        raise ValueError('model_metadata ValueError: {}'.format(ex))
    except Exception as ex:
        raise Exception('Model metadata does not exist: {}'.format(ex))
