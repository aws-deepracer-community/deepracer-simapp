// Generated by gencpp from file deepracer_simulation_environment/VideoMetricsSrvResponse.msg
// DO NOT EDIT!


#ifndef DEEPRACER_SIMULATION_ENVIRONMENT_MESSAGE_VIDEOMETRICSSRVRESPONSE_H
#define DEEPRACER_SIMULATION_ENVIRONMENT_MESSAGE_VIDEOMETRICSSRVRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point32.h>

namespace deepracer_simulation_environment
{
template <class ContainerAllocator>
struct VideoMetricsSrvResponse_
{
  typedef VideoMetricsSrvResponse_<ContainerAllocator> Type;

  VideoMetricsSrvResponse_()
    : lap_counter(0.0)
    , completion_percentage(0.0)
    , reset_counter(0)
    , throttle(0.0)
    , steering(0.0)
    , best_lap_time(0.0)
    , total_evaluation_time(0.0)
    , done(false)
    , x(0.0)
    , y(0.0)
    , object_locations()  {
    }
  VideoMetricsSrvResponse_(const ContainerAllocator& _alloc)
    : lap_counter(0.0)
    , completion_percentage(0.0)
    , reset_counter(0)
    , throttle(0.0)
    , steering(0.0)
    , best_lap_time(0.0)
    , total_evaluation_time(0.0)
    , done(false)
    , x(0.0)
    , y(0.0)
    , object_locations(_alloc)  {
  (void)_alloc;
    }



   typedef float _lap_counter_type;
  _lap_counter_type lap_counter;

   typedef float _completion_percentage_type;
  _completion_percentage_type completion_percentage;

   typedef int32_t _reset_counter_type;
  _reset_counter_type reset_counter;

   typedef float _throttle_type;
  _throttle_type throttle;

   typedef float _steering_type;
  _steering_type steering;

   typedef float _best_lap_time_type;
  _best_lap_time_type best_lap_time;

   typedef float _total_evaluation_time_type;
  _total_evaluation_time_type total_evaluation_time;

   typedef uint8_t _done_type;
  _done_type done;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  _object_locations_type;
  _object_locations_type object_locations;





  typedef boost::shared_ptr< ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator> const> ConstPtr;

}; // struct VideoMetricsSrvResponse_

typedef ::deepracer_simulation_environment::VideoMetricsSrvResponse_<std::allocator<void> > VideoMetricsSrvResponse;

typedef boost::shared_ptr< ::deepracer_simulation_environment::VideoMetricsSrvResponse > VideoMetricsSrvResponsePtr;
typedef boost::shared_ptr< ::deepracer_simulation_environment::VideoMetricsSrvResponse const> VideoMetricsSrvResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace deepracer_simulation_environment

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'deepracer_simulation_environment': ['/opt/workspace/AwsSilverstoneSimulationApplication/src/deepracer_simulation_environment/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ccf1b22780e2ca6fb64b60963df11d26";
  }

  static const char* value(const ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xccf1b22780e2ca6fULL;
  static const uint64_t static_value2 = 0xb64b60963df11d26ULL;
};

template<class ContainerAllocator>
struct DataType< ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "deepracer_simulation_environment/VideoMetricsSrvResponse";
  }

  static const char* value(const ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 lap_counter\n\
float32 completion_percentage\n\
int32 reset_counter\n\
float32 throttle\n\
float32 steering\n\
float32 best_lap_time\n\
float32 total_evaluation_time\n\
bool done\n\
float32 x\n\
float32 y\n\
geometry_msgs/Point32[] object_locations\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lap_counter);
      stream.next(m.completion_percentage);
      stream.next(m.reset_counter);
      stream.next(m.throttle);
      stream.next(m.steering);
      stream.next(m.best_lap_time);
      stream.next(m.total_evaluation_time);
      stream.next(m.done);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.object_locations);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VideoMetricsSrvResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator>& v)
  {
    s << indent << "lap_counter: ";
    Printer<float>::stream(s, indent + "  ", v.lap_counter);
    s << indent << "completion_percentage: ";
    Printer<float>::stream(s, indent + "  ", v.completion_percentage);
    s << indent << "reset_counter: ";
    Printer<int32_t>::stream(s, indent + "  ", v.reset_counter);
    s << indent << "throttle: ";
    Printer<float>::stream(s, indent + "  ", v.throttle);
    s << indent << "steering: ";
    Printer<float>::stream(s, indent + "  ", v.steering);
    s << indent << "best_lap_time: ";
    Printer<float>::stream(s, indent + "  ", v.best_lap_time);
    s << indent << "total_evaluation_time: ";
    Printer<float>::stream(s, indent + "  ", v.total_evaluation_time);
    s << indent << "done: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.done);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "object_locations[]" << std::endl;
    for (size_t i = 0; i < v.object_locations.size(); ++i)
    {
      s << indent << "  object_locations[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "    ", v.object_locations[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEEPRACER_SIMULATION_ENVIRONMENT_MESSAGE_VIDEOMETRICSSRVRESPONSE_H
