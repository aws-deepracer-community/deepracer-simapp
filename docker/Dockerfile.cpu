ARG BUNDLE_PREFIX=awsdeepracercommunity
FROM ${BUNDLE_PREFIX}/deepracer-robomaker-build-bundle:latest AS bundle

FROM ubuntu:20.04

ENV TZ="America/New_York" 
ENV DEBIAN_FRONTEND="noninteractive" 
RUN dpkg --add-architecture i386 && \
    apt-get update && \ 
    apt-get upgrade -y && \
    apt-get install --no-install-recommends -y \
    apt-utils \
    build-essential \
    curl \
    cmake \
    gnupg  \
    jq \
    jwm \
    lsb-core \
    net-tools \
    pkg-config \
    python3-dev \
    python3-pip \
    wget \
    x11-xserver-utils \
    x11vnc \
    xmlstarlet \
    xvfb \ 
    mesa-utils \
    libgl1-mesa-glx \
    libglu1-mesa \    
    libglvnd0 libglvnd0:i386 \
    libgl1 libgl1:i386 \
    libglx0 libglx0:i386 \
    libegl1 libegl1:i386 \
    libgles2 libgles2:i386 \
    libxau6 libxau6:i386 \
    libxdmcp6 libxdmcp6:i386 \
    libxcb1 libxcb1:i386 \
    libxext6 libxext6:i386 \
    libx11-6 libx11-6:i386 && \    
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES \
    ${NVIDIA_VISIBLE_DEVICES:-all}
ENV NVIDIA_DRIVER_CAPABILITIES \
    ${NVIDIA_DRIVER_CAPABILITIES:+$NVIDIA_DRIVER_CAPABILITIES,}graphics,compat32,utility

COPY docker/files/10_nvidia.json /usr/share/glvnd/egl_vendor.d/10_nvidia.json

# Install ROS noetic and Gazebo9
RUN sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
RUN curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add -

RUN sh -c 'echo "deb http://packages.osrfoundation.org/gazebo/ubuntu-stable $(lsb_release -sc) main" > /etc/apt/sources.list.d/gazebo-stable.list'
RUN curl -s http://packages.osrfoundation.org/gazebo.key | apt-key add -

RUN apt-get update -y && \
    apt-get install -y --allow-unauthenticated --no-install-recommends \
    gazebo11 \
    libgazebo11-dev \
    libcurl4-openssl-dev \
    libignition-math4 \
    libignition-math4-dev \
    libx264-dev \
    python3-colcon-common-extensions \
    python3-pip \
    python3-rosdep \
    ros-noetic-media-export \
    ros-noetic-ros-base \
    ros-noetic-rosmsg \
    ros-noetic-rqt-common-plugins \
    ros-noetic-web-video-server \
    ros-noetic-xacro \
    rviz \
    x264 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*
ENV ROS_DISTRO=noetic

ADD docker/requirements.txt /
RUN python3 -m pip install -U pip 'setuptools<65' && \
    pip3 install --no-cache-dir -r requirements.txt 

COPY --from=bundle  /opt/bundle/install /opt/install
WORKDIR /opt/install

RUN apt-get update -y && rosdep init && rosdep update --include-eol-distros && \
    rosdep install --from-paths . --ignore-src -r -y deepracer_gazebo_system_plugin deepracer_msgs deepracer_simulation_environment sagemaker_rl_agent && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

ENV COLCON_CURRENT_PREFIX="/opt/install"
ENV COLCON_PYTHON_EXECUTABLE="/usr/bin/python3"
ENV _CATKIN_SETUP_DIR="/opt/ros/noetic"

COPY ./bundle/rl_coach.patch /opt/rl_coach.patch
RUN patch -p1 -N --directory=/usr/local/lib/python3.8/dist-packages/ < /opt/rl_coach.patch
COPY ./docker/files/run.sh run.sh
COPY ./docker/files/debug-reward.diff debug-reward.diff
COPY ./docker/files/shutdown.sh shutdown.sh
COPY ./bundle/script/start_deepracer_node_monitor.py start_deepracer_node_monitor.py
COPY ./bundle/src/deepracer_node_monitor/config/*.txt .

COPY VERSION .
ARG IMG_VERSION
LABEL maintainer "AWS DeepRacer Community - deepracing.io"
LABEL version $IMG_VERSION

ENTRYPOINT ["/bin/bash", "-c"]
CMD ["./run.sh run distributed_training.launch"]
