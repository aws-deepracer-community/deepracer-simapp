ARG BUNDLE_PREFIX=awsdeepracercommunity
ARG CORE_IMG=ubuntu:20.04

FROM ${BUNDLE_PREFIX}/deepracer-simapp-build-bundle:latest AS bundle
FROM ${CORE_IMG}

ARG NVCC_VER=""
ARG TF_VER=""

ENV TZ="America/New_York" 
ENV DEBIAN_FRONTEND="noninteractive" 
RUN dpkg --add-architecture i386 && \
    apt-get update && \ 
    apt-get upgrade -y && \
    apt-get install --no-install-recommends -y \
    apt-utils \
    build-essential \
    curl \
    cmake \
    gnupg  \
    ffmpeg \
    jq \
    jwm \
    lsb-core \
    net-tools \
    pkg-config \
    python3-dev \
    python3-opengl \
    python3-pip \
    libjpeg-dev \
    libxrender1 \
    wget \
    x11-xserver-utils \
    x11vnc \
    xmlstarlet \
    xvfb \ 
    zlib1g-dev \
    mesa-utils \
    libgomp1 \
    libfreetype6-dev \
    libhdf5-serial-dev \
    libpng-dev \
    libzmq3-dev \
    libgl1-mesa-glx \
    libglu1-mesa \    
    libglvnd0 libglvnd0:i386 \
    libgl1 libgl1:i386 \
    libglx0 libglx0:i386 \
    libegl1 libegl1:i386 \
    libgles2 libgles2:i386 \
    libxau6 libxau6:i386 \
    libxdmcp6 libxdmcp6:i386 \
    libxcb1 libxcb1:i386 \
    libxext6 libxext6:i386 \
    libx11-6 libx11-6:i386 \
    ${NVCC_VER} && \    
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Prevent docker build get stopped by requesting user interaction
ENV DEBIAN_FRONTEND=noninteractive
ENV DEBCONF_NONINTERACTIVE_SEEN=true
# Python wonâ€™t try to write .pyc or .pyo files on the import of source modules
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
# See http://bugs.python.org/issue19846
ENV PYTHONIOENCODING=UTF-8
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8

# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES \
    ${NVIDIA_VISIBLE_DEVICES:-all}
ENV NVIDIA_DRIVER_CAPABILITIES \
    ${NVIDIA_DRIVER_CAPABILITIES:-all}

COPY docker/files/10_nvidia.json /usr/share/glvnd/egl_vendor.d/10_nvidia.json

# Install ROS noetic and Gazebo9
RUN sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
RUN curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add -

RUN sh -c 'echo "deb http://packages.osrfoundation.org/gazebo/ubuntu-stable $(lsb_release -sc) main" > /etc/apt/sources.list.d/gazebo-stable.list'
RUN curl -s http://packages.osrfoundation.org/gazebo.key | apt-key add -

RUN apt-get update -y && \
    apt-get install -y --allow-unauthenticated --no-install-recommends \
    gazebo11 \
    libgazebo11-dev \
    libcurl4-openssl-dev \
    libignition-math4 \
    libignition-math4-dev \
    libx264-dev \
    python3-colcon-common-extensions \
    python3-pip \
    python3-rosdep \
    ros-noetic-media-export \
    ros-noetic-ros-base \
    ros-noetic-rosmsg \
    ros-noetic-rqt-common-plugins \
    ros-noetic-web-video-server \
    ros-noetic-xacro \
    rviz \
    x264 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*
ENV ROS_DISTRO=noetic

# Install Redis.
RUN cd /tmp && \
    wget https://download.redis.io/releases/redis-6.2.7.tar.gz && \
    tar xvzf redis-6.2.7.tar.gz && \
    cd redis-6.2.7 && \
    make && \
    make install && \
    rm -rf /tmp/redis*

# Install docker
RUN curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add - && \
	 echo "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" > /etc/apt/sources.list.d/docker.list
RUN apt-get update && apt-get install --no-install-recommends -y docker-ce-cli && apt-get clean && rm -rf /var/lib/apt/lists/*
RUN curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose && chmod +x /usr/local/bin/docker-compose

# Install Python PIP modules
ADD docker/requirements.txt /
RUN python3 -m pip install -U --no-cache-dir pip 'setuptools<65' && \
    export SKLEARN_ALLOW_DEPRECATED_SKLEARN_PACKAGE_INSTALL=True && \
    pip3 install -U --no-cache-dir -r requirements.txt ${TF_VER} --ignore-installed psutil

# Copy compiled bundle
COPY --from=bundle  /opt/bundle/install /opt/simapp
WORKDIR /opt/simapp

# Install ROS dependencies
RUN apt-get update -y && rosdep init && rosdep update --rosdistro=noetic && \
    rosdep install --rosdistro=noetic --from-paths . --ignore-src -r -y deepracer_gazebo_system_plugin deepracer_msgs deepracer_simulation_environment sagemaker_rl_agent && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

ENV COLCON_CURRENT_PREFIX="/opt/simapp"
ENV COLCON_PYTHON_EXECUTABLE="/usr/bin/python3"
ENV _CATKIN_SETUP_DIR="/opt/ros/noetic"

# Copy Sagemaker and misc files
COPY ./docker/files/ml-code /opt/ml/code
COPY ./docker/files/sagemaker/start.sh /opt/ml/code/start.sh
ENV SAGEMAKER_PROGRAM start.sh

# Patch rl_coach
COPY ./bundle/rl_coach.patch /opt/ml/code/rl_coach.patch
RUN patch -p1 -N --directory=/usr/local/lib/python3.8/dist-packages/ < /opt/ml/code/rl_coach.patch

# Copy Robomaker scripts and configuration files
COPY ./docker/files/robomaker/run.sh run.sh
COPY ./docker/files/robomaker/debug-reward.diff debug-reward.diff
COPY ./docker/files/robomaker/shutdown.sh shutdown.sh
COPY ./bundle/script/start_deepracer_node_monitor.py start_deepracer_node_monitor.py
COPY ./bundle/src/deepracer_node_monitor/config/*.txt .

# Copy RL-Coach configuration files
COPY ./docker/files/rl-coach/start.py /opt/code/ml/rl_coach/start.py
RUN mkdir -p /root/.sagemaker
COPY ./docker/files/rl-coach/config.yaml /root/.sagemaker/config.yaml

# Add labels
COPY VERSION .
ARG IMG_VERSION
LABEL maintainer "AWS DeepRacer Community - deepracing.io"
LABEL version $IMG_VERSION

ENTRYPOINT ["/bin/bash", "-c"]
CMD ["./run.sh run distributed_training.launch"]
